generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  firstName        String   @map("first_name")
  lastName         String   @map("last_name")
  email            String   @unique
  password         String
  birthDate        DateTime @map("birth_date")
  userAddressId    String   @map("user_address_id")
  userPreferenceId String   @map("user_preference_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  Address      UserAddress    @relation(fields: [userAddressId], references: [id])
  Preferences  UserPreference @relation(fields: [userPreferenceId], references: [id])
  ToDos        ToDo[]
  StockOrders  StockOrder[]
  StockHistory StockHistory[]

  @@map("users")
}

model UserAddress {
  id        String   @id @default(uuid())
  city      String
  state     String
  country   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User User[]

  @@map("user_addresses")
}

model UserPreference {
  id        String   @id @default(uuid())
  theme     String   @default("default")
  language  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User User[]

  @@map("user_preferences")
}

model ToDo {
  id          String   @id @default(uuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  date        DateTime @default(now())
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  User User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("todos")
}

model Stock {
  id               String   @id @default(uuid())
  ticker           String   @unique
  name             String
  type             String   @map("type_id")
  price            Decimal  @db.Decimal(10, 2)
  latestTradingDay DateTime @map("latest_trading_day")
  open             Decimal  @db.Decimal(10, 2)
  changePercent    Decimal  @map("change_percent") @db.Decimal(10, 2)

  StockType   StockType    @relation(fields: [type], references: [name])
  StockOrders StockOrder[]

  @@map("stocks")
}

model StockType {
  id   String @id @default(uuid())
  name String @unique

  Stocks       Stock[]
  StockHistory StockHistory[]

  @@map("stock_types")
}

model StockOrder {
  id          String   @id @default(uuid())
  stockTicker String   @map("stock_tickers")
  orderType   String   @map("order_type")
  orderGroup  String?  @map("order_group")
  userId      String   @map("user_id")
  quantity    Decimal  @db.Decimal(10, 2)
  price       Decimal  @db.Decimal(10, 2)
  grossValue  Decimal  @default(0) @map("gross_value") @db.Decimal(10, 2)
  createdAt   DateTime @map("created_at")
  broker      String   @default("") @map("broker")

  Stock      Stock       @relation(fields: [stockTicker], references: [ticker])
  OrderType  OrderType   @relation(fields: [orderType], references: [name])
  OrderGroup OrderGroup? @relation(fields: [orderGroup], references: [name])
  User       User        @relation(fields: [userId], references: [id])

  @@map("stock_orders")
}

model OrderType {
  id   String @id @default(uuid())
  name String @unique

  StockOrder StockOrder[]

  @@map("order_types")
}

model OrderGroup {
  name String @id

  StockOrders StockOrder[]

  @@map("order_groups")
}

model StockHistory {
  id            String   @id @default(uuid())
  stockTypeName String   @map("stock_type_name")
  userId        String   @map("user_id")
  date          DateTime
  grossValue    Decimal  @default(0) @map("gross_value") @db.Decimal(10, 2)

  StockType StockType @relation(fields: [stockTypeName], references: [name])
  User      User      @relation(fields: [userId], references: [id])

  @@map("stock_histories")
}
